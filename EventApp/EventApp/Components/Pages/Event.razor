@page "/event/{id:int}"
@using EventApp.Infrastructure
@using EventApp.Models

@inject EventsApiClient EventsApi
@inject VolunteerApiClient VolunteerApi
@inject ILogger<Event> Logger

<h3>Event</h3>

<EditForm Model="@CurrentEvent" OnValidSubmit="OnSubmit" FormName="Event" >
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="name">Name:</label>
        <InputText id="name" @bind-Value="CurrentEvent.Name" class="form-control" />
    </div>

    @foreach (var volunteer in Volunteers)
    {
        <div class="form-group row">
            <label for="volunteer">@volunteer.Name</label>
        </div>
    }
  
    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    private IEnumerable<Volunteer> Volunteers { get; set; } = new List<Volunteer>();

    [SupplyParameterFromForm]
    public EventViewModel CurrentEvent { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var currentEvent = await EventsApi.GetEventByIdAsync(Id);
        CurrentEvent = new EventViewModel { Id = currentEvent.Id, Name = currentEvent.Name };

        Volunteers = await VolunteerApi.GetVolunteersAsync();
        Logger.LogInformation($"Volunteers loaded: {Volunteers.Count()}");
    }


    public async Task OnSubmit()
    {
        Logger.LogInformation("Event submitted");
        await Task.CompletedTask;
    }


}

